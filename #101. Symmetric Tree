Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

=========================
Java
1. recursion --6ms . TC:O(n) SC:O(n)
class Solution
    public boolean isSymmetric(TreeNode root) {
        if (root == null) return true;

        return checkNode(root.left, root.right);
    }

    public boolean checkNode(TreeNode a, TreeNode b){
        if (a==null || b==null) return a==b;
        if (a.val != b.val) return false;
        return checkNode(a.left, b.right) && checkNode(a.right, b.left);
    }        

}

2. iteration --8ms
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) return true;
        Stack<TreeNode> sL = new Stack<>();
        Stack<TreeNode> sR = new Stack<>();
        
        sL.push(root.left); sR.push(root.right);
        
        while(!sL.empty() && !sR.empty()) {
            TreeNode node1 = sL.pop();
            TreeNode node2 = sR.pop();
            
            if(node1 != null && node2 != null) {
                if (node1.val != node2.val) return false;
                sL.push(node1.left);
                sL.push(node1.right);
                sR.push(node2.right);
                sR.push(node2.left);;
            }else{
                if(node1 != node2) return false;
            }
        }
        return sL.size() == sR.size();    
    }    
}

3. Use the similar recursive funciton as #100 --6ms
public boolean isSymmetric(TreeNode root) {
    return isMirror(root, root);
}

public boolean isMirror(TreeNode t1, TreeNode t2) {
    if (t1 == null && t2 == null) return true;
    if (t1 == null || t2 == null) return false;
    return (t1.val == t2.val)
        && isMirror(t1.right, t2.left)
        && isMirror(t1.left, t2.right);
}

4. Use Queue for iteration --7ms
public boolean isSymmetric(TreeNode root) {
    Queue<TreeNode> q = new LinkedList<>();
    q.add(root);
    q.add(root);
    while (!q.isEmpty()) {
        TreeNode t1 = q.poll();
        TreeNode t2 = q.poll();
        if (t1 == null && t2 == null) continue;
        if (t1 == null || t2 == null) return false;
        if (t1.val != t2.val) return false;
        q.add(t1.left);
        q.add(t2.right);
        q.add(t1.right);
        q.add(t2.left);
    }
    return true;
}

5. Use stack and rewrite 4 --8ms

public boolean isSymmetric(TreeNode root) {
        Stack<TreeNode> q = new Stack<>();
        Stack<TreeNode> q1 = new Stack<>();
        
        q.push(root);
        q1.push(root);

        while(!q.isEmpty() && !q1.isEmpty()) {
            TreeNode a = q.pop();
            TreeNode b = q1.pop();

            if ( a == null && b==null) continue;
            if ( a == null || b==null) return false;
            if (a.val != b.val) return false;
            q.push(a.left);
            q1.push(b.right);
            q.push(a.right);
            q1.push(b.left);
        }
        return true;
}
        q.add(t1.right);
        q.add(t1.right);

==========================
Python:
1. recursive reference java#3 --40ms
# Definition for a binary tree node.
class TreeNode:
     def __init__(self, x):
         self.val = x
         self.left = None
         self.right = None

class Solution:
    def printTree(self, root: 'TreeNode'):
        if root.left:  self.printTree(root.left)
        print( root.val),
        if root.right: self.printTree(root.right)

    def builtTree(self, arr: 'list'):
        if not arr:    return None
        root = TreeNode(arr[0])
        stack = [root]

        for i in range(1, len(arr),2):
            node = stack.pop()
            node.left = TreeNode( arr[i])
            node.right = TreeNode(arr[i+1])
            stack.insert(0,node.left)
            stack.insert(0,node.right)            
        return root

    def isSymmetric(self, root: 'TreeNode') -> 'bool':
        return self.checkNode(root, root)

    def checkNode(self, n1: 'TreeNode', n2: 'TreeNode') -> 'bool':
        if not n1 or not n2 : return n1 ==n2
        if n1.val != n2.val : return False
        return self.checkNode(n1.left, n2.right) and self.checkNode(n1.right, n2.left)
        



v1 = [1,2,2,3,3,3,3]

test = Solution()
root = test.builtTree(v1)
#test.printTree(root)
print(test.isSymmetric(root))

2. iteration --40ms
class Solution:
    def isSymmetric(self, root: 'TreeNode') -> 'bool':
        stack =[(root, root)]

        while len(stack)>0 :
            n1, n2 = stack.pop()
            if n1 and n2: 
                if(n1.val != n2.val): return False
                stack.append([n1.left, n2.right])
                stack.append([n1.right, n2.left])
            else:
                if n1 != n2 : return False
        return True        

