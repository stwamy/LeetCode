Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

Example 1:

Input: ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
Note:

All given inputs are in lowercase letters a-z.

--------------------------------------------------------------------------------------------
Java
1. My first solution, brutal force. Beware of the situation in empty stringArray, the checking string is the prefix instead of any substring
This method find prefix from small to long in every string, prefix will be changed after once iterate the whole array. -12ms

class Solution {
    public String longestCommonPrefix(String[] strs) {

        if (strs.length == 0) return "";

        String prefix = "";
        int cnt = 1;

        while(cnt<=strs[0].length()){
            String s = strs[0].substring(0,cnt);
            for (int i=0; i<strs.length;i++){
                if (strs[i].indexOf(s)!=0){
                    return prefix;
                }
            }
            prefix = s;
            cnt++;
        }
        return prefix;
        
    }
}

2.  Horizontal scanning. Scan array just once, make the initial prefix as strs[0] and find the common substring with the next element. It really saves a lot of operation on focusing the most common substring. -7ms
    
    public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) return "";

        String prefix = strs[0];

        for(int i=1; i< strs.length; i++) //{ eliminate this "{" can save 1ms
            while(strs[i].indexOf(prefix)!=0){
                prefix = prefix.substring(0, prefix.length()-1);
                if(prefix.isEmpty()) return "";
        }
        return prefix;

    }

Time complexity : O(S), where S is the sum of all characters in all strings.
                  In the worst case all strings are the same. The algorithm compares the string s[1] with the other strings.                     There are S character comparisons, where S is the sum of all characters in the input array.

Space complexity: O(1). We only used constant extra space.

3. Vertical scanning. Actually, this mathod is exactly what I used in "1". -9ms

public String longestCommonPrefix(String[] strs) {
    if (strs == null || strs.length == 0) return "";
    for (int i = 0; i < strs[0].length() ; i++){
        char c = strs[0].charAt(i);
        for (int j = 1; j < strs.length; j ++) {
            if (i == strs[j].length() || strs[j].charAt(i) != c)
                return strs[0].substring(0, i);             
        }
    }
    return strs[0]; // Here is in case of only one string in the array
}

Time complexity : O(S), where S is the sum of all characters in all strings. 
                  In the worst case there will be n equal strings with length m 
                  and the algorithm performs S = m*n character comparisons.
Space complexity: O(1). We only used constant extra space.


4. Divide and conquer - 9ms
Divide and conquer mathod always contains three parts. 
First is to verify the input is valid and to call the iteration.
Second is iteration: (1) dealing with (left == right) situation; (2) mid = (left + right)/2; resLeft = iteration(left,mid);
                    resRith = iteration(mid+1, right); (3) return compareLnR
Third is return one time left comparing with right.

class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return "";
        return longestCommonPrefix(strs, 0 , strs.length - 1);
    }
    
    public String longestCommonPrefix(String[] strs, int l, int r) {
        if (l == r) return strs[l];

        int mid = (l+r)/2;
        String lcpLeft = longestCommonPrefix(strs, l, mid);
        String lcpRight = longestCommonPrefix(strs, mid+1, r);
        return commPrefix(lcpLeft, lcpRight);
    }
    
    public String commPrefix(String lcpLeft, String lcpRight){
        int minLen = Math.min(lcpLeft.length(), lcpRight.length());
        for(int i = 0; i < minLen; i++){
            if(lcpLeft.charAt(i) != lcpRight.charAt(i))
                return lcpLeft.substring(0,i);
        }
        return lcpLeft.substring(0,minLen);
    }
    


Complexity Analysis

In the worst case we have n equal strings with length m
Time complexity : O(s) where S is the number of all characters in the array, S = m*n 
                  Time complexity is 2* T(n/2) + O(m) = O(s)
                  In the best case this algorithm performs O(minLen * n) comparisons,
                  where minLen is the shortest string of the array
Space complexity : O(m*log(n))
                   There is a memory overhead since we store recursive calls in the execution stack. 
                   There are log(n) recursive calls, each store need m space to store the result.
                   

5. Binary Search -7ms
(I don't think this method is suitable applying to this question. However, it still provides an algorithm to use such technique, and surprisingly it works efficiency.)
The idea is to apply binary search method to find the string with maximum value L, which is common prefix of all of the strings. 
The algorithm searches space is the interval [0, minLen], where minLen is minimum string length and the maximum possible common prefix. Each time search space is divided in two equal parts, one of them is discarded, because it is sure that it doesn't contain the solution. There are two possible cases:
(1). S[1...mid] is not a common string. 
     This means that for each j > i S[1..j] is not a common string and we discard the second half of the search space.
(2). S[1...mid] is common string. 
     This means that for for each i < j S[1..i] is a common string and we discard the first half of the search space, because we try to find longer common prefix.

//startsWith(tmp)
Binary Search also have variables of low, high, mid, and use a while loop to get the half devided. It also needs a comparison function to handle with the subpart.

class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return "";

        int minLen = Integer.MAX_VALUE;
        //find the minLen in strs
        for (String str : strs)
            minLen = Math.min(minLen, str.length());

        int low = 1;
        int high = minLen;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (isCommonPrefix(strs, mid))
                low = mid + 1;
            else
                high = mid - 1;
        }
        return strs[0].substring(0, (low + high) / 2);

    }

    public boolean isCommonPrefix(String[] strs, int len){
        String tmp = strs[0].substring(0, len);
        for(int i = 1; i<strs.length; i++)
            if( !strs[i].startsWith(tmp))
                return false;
        return true;
    }
}    

Complexity Analysis
In the worst case we have n equal strings with length m
Time complexity : O(S⋅log(n)), where S is the sum of all characters in all strings.
                  The algorithm makes log(n) iterations, for each of them there are S=m∗n comparisons, 
                  which gives in total O(S⋅log(n)) time complexity.
Space complexity : O(1). We only used constant extra space. 



--------------------------------------------------------------------------------------------
the fragment below is to find the common string not only the prefix

class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) return "";
        if(strs.length==1) return strs[0];

        //1. find the shortest string
        int shortest;
        shortest = 0;

        for(int i=0; i< strs.length; i++){  //i can be 1 as well
            if (strs[i].length() < strs[shortest].length()) shortest = i;
        }

        String std = strs[shortest];
        //2.1 One charachter situation:
        if (std.length()==1){
            for (int t = 0; t < strs.length; t++) {
                if (strs[t].indexOf(std) == -1) {
                   return "";
                }
            }
            return std;
        }

        //2.2 start scan the substr in that string and look up in the group
        String f="";
        for(int i = 0; i<std.length(); i++)
            for (int j = i+1 ; j <= std.length(); j++) {
                String tmp = std.substring(i, j);
                boolean chk = true;
                for (int t = 0; t < strs.length; t++) {
                    if (strs[t].indexOf(tmp) == -1) {
                        chk = false;
                        break;
                    }
                }
                if (chk == false) continue;
                if(tmp.length() > f.length()) f=tmp;
            }

        return f;
    }
}

class Main {
    public static void main(String[] args) {

        Solution a = new Solution();
        String[] s = {"flower","flow","flight"};
        String[] s1={"cc","cc"};
        String h = a.longestCommonPrefix(s);
        System.out.println(h);
    }
}
