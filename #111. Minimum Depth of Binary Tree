Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.

================================================
Java:
1. Recursion -- 0ms there are four situation: node is null; node is leaf; node has one child; node has two children.
class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) return 0;
        
        if (root.left==null && root.right == null) return 1;
        
        if (root.left==null)
            return 1+ minDepth(root.right);
        if (root.right == null)
            return 1+ minDepth(root.left);
        
        return 1+Math.min(minDepth(root.left), minDepth(root.right));
    }
}


2. Iteration --0ms Use Queue and find leaf by level
class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) return 0;
        if (root.left == null && root.right == null) return 1;

        Queue<TreeNode> s = new LinkedList<>();
        s.offer(root);
        int d = 1;

        while(!s.isEmpty()){
            int levelNode = s.size();
            for(int i=0; i<levelNode; i++){
                TreeNode curr = s.poll();
                if (curr != null){
                    if(curr.left == null && curr.right == null) return d;

                    if(curr.left != null)   s.offer(curr.left);
                    if(curr.right != null)  s.offer(curr.right);
                }
            }
            d++;
        }
        return d;
    }
}

================================================
Python:
1. Recursion--52ms BFS when the root node only has one child, the depth should be the depth of its child instead of 1
class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if not root: return 0
        if not root.left and not root.right: return 1
        if not root.left and root.right: 
            return 1+ self.minDepth(root.right)
        if not root.right and root.left:
            return 1+ self.minDepth(root.left)
        
        return 1+min(self.minDepth(root.left), self.minDepth(root.right))

2. Iteration -- 48ms
class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if not root: return 0
        if not root.left and not root.right: return 1
        
        NodeQ = []
        NodeQ.insert(0, root)
        d = 1
        
        while(len(NodeQ) >0):
            s = len(NodeQ)
            for i in range(s):
                node = NodeQ.pop()
                if node:
                    if not node.left and not node.right:   return d
                    if node.left: NodeQ.insert(0, node.left)
                    if node.right: NodeQ.insert(0, node.right)
            d +=1
        
        return d
