Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

-----------------------------------------------------
Java [There is a little difference between reuse the listnode or create a new one in statements]
1. I am kind of confused about the head node. After reviewed other solutions, I figured out that it needs to built a head node but return head.next as a list without head. --13ms
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;

        ListNode phead = new ListNode(Integer.MIN_VALUE);
        ListNode curr = phead;

        while(l1 != null && l2 != null){
            if(l1.val <= l2.val ){
                curr.next = l1;
                l1 = l1.next;
            }
            else{
                curr.next = l2;
                l2 = l2.next;
            }
            curr = curr.next;
        }

        if (l1 == null) curr.next = l2;
        if (l2 == null) curr.next = l1;

        return phead.next;
        
    }
}

2. Recursion version  -- 13ms
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2){
            if(l1 == null) return l2;
            if(l2 == null) return l1;
            if(l1.val < l2.val){
                l1.next = mergeTwoLists(l1.next, l2);
                return l1;
            } else{
                l2.next = mergeTwoLists(l1, l2.next);
                return l2;
            }
    }
}



-------------------------------------------------
note: with test version
import java.util.*;
/**
 * Definition for singly-linked list. **/
class ListNode {
      int val;
      ListNode next;
      ListNode(int x) { val = x; }

 }


class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;

        ListNode phead = new ListNode(Integer.MIN_VALUE);
        ListNode curr = phead;

        while(l1 != null && l2 != null){
            if(l1.val <= l2.val ){
                curr.next = l1;
                l1 = l1.next;
            }
            else{
                curr.next = l2;
                l2 = l2.next;
            }
            curr = curr.next;
        }

        if (l1 == null) curr.next = l2;
        if (l2 == null) curr.next = l1;

        return phead.next;

    }
}

class Main {
    public static void main(String[] args) {

        ListNode l1 = new ListNode(-1);
        ListNode l2 = new ListNode(-1);
        ListNode p1 = l1;
        ListNode p2 = l2;

        int[] v1 = {};
        int[] v2 = {1,3,4};

        for(int loop : v1){
            p1.next = new ListNode(loop);
            p1 = p1.next;
        }

        for(int loop : v2){
            p2.next = new ListNode(loop);
            p2 = p2.next;
        }

        /**
        while(l1 != null){
            System.out.print(l1.val);
            System.out.print(" -> ");
            l1 = l1.next;
        }

        System.out.println();


        while(l2 != null){
            System.out.print(l2.val);
            System.out.print(" -> ");
            l2 = l2.next;
        }
        **/

        Solution a = new Solution();
        ListNode mList = a.mergeTwoLists(l1.next, l2.next);


        while(mList != null){
            System.out.print(mList.val);
            System.out.print(" -> ");
            mList = mList.next;
        }
    }
}
