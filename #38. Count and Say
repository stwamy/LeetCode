The count-and-say sequence is the sequence of integers with the first five terms as following:

1.     1
2.     11
3.     21
4.     1211
5.     111221
1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.

Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.
Note: Each term of the sequence of integers will be represented as a string.

Example 1:
Input: 1
Output: "1"

Example 2:
Input: 4
Output: "1211"

------------------------------------------------------------------------
Note: The rule inn the sequence: the (i+1)th sequence is the "count and say" of the ith sequence

Java:
1. My solution use while loop --12ms
class Solution {
    public String countAndSay(int n) {
        if (n == 1) return "1";
        if (n == 2) return "11";


        String cas = "11";
        for (int t = 2; t < n; t++) {
            int loc = 0;
            String r = "";
            int cnt = 1;
            while (loc < cas.length()-1) {
                if (cas.charAt(loc) != cas.charAt(loc + 1)) {
                    r += Integer.toString(cnt) + cas.charAt(loc) ;
                    cnt = 1;
                } else {
                    cnt++;
                }
                loc++;
            }
            cas = r+ Integer.toString(cnt) + cas.charAt(loc);
        }

            return cas;
        
    }
}

2. Use a function to call --12ms
class Solution {
    public String countAndSay(int n) {
        if (n==1) return "1";

        String s = "11";
        for(int i=2; i<n; i++){
            s = readS(s);
        }
        return s;
    }

    private String readS(String s){
        String r = "";
        int i=0; int j=1;

        while(i+j<s.length()){
            if(s.charAt(i)==s.charAt(i+j)){
                j++;
            }else{
                r+= "" + j + s.charAt(i);
                i+=j;
                j=1;
            }
        }

        r+= "" + j + s.charAt(i);
        return r;
    }
}

class Main {
    public static void main(String[] args) {

        Solution test = new Solution();

        for(int i=1; i<31; i++){
            System.out.println(test.countAndSay(i));
        }
    }


}


// Another function to simplify the string assemble  --14ms
    private String readS(String s){
        String res = "";

        for(int i = 0; i<s.length();){
            int j =1;
            while(i+j<s.length() && s.charAt(i)==s.charAt(i+j)) j++;
            res += "" + j + s.charAt(i);
            i+=j;
        }
        return res;
    }

3. Use recusion, actually it just need some adjustment to use n-1;  --13ms
class Solution {
    public String countAndSay(int n) {
        if (n==1) return "1";
        String s = countAndSay(n-1);
        return readS(s); // Function readS(s) is the same as above.
    }


Python
1.iteration with function --40ms
class Solution:
    def countAndSay(self, n):
        """
        :type n: int
        :rtype: str
        """
        if(n == 1): return "1"
        res = "1"

        for i in range(1,n):    # beware of the range
            res = self.readS(res)

        return res

    def readS(self, s):
        res = ""
        i=0
        while(i<len(s)):
            j=1
            while(i+j < len(s) and s[i]==s[i+j]): j+=1
            res += str(j) + s[i]
            i +=j

        return res        
        
2. combine those two functions: --40ms
def countAndSay(n):
  """
  :type n: int
  :rtype: str
  """
  #if (n==1): return "1"

  res = "1"
  for _ in range (n-1):
    tmp=''
    i = 0
    while(i<len(res)):      # Can't apply "for i in range(len(res))", cause we need to manipulate "i+=j"
      j = 1
      while(i+j<len(res) and res[i]==res[i+j]): j+=1
      tmp += str(j)+ res[i]
      i+=j
    res = tmp 

  return res
  
3. Some other solution use python expression --40ms
https://leetcode.com/problems/count-and-say/discuss/15999/4-5-lines-Python-solutions

def countAndSay(self, n):
    s = '1'
    for _ in range(n - 1):
        s = re.sub(r'(.)\1*', lambda m: str(len(m.group(0))) + m.group(1), s)
    return s
