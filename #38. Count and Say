The count-and-say sequence is the sequence of integers with the first five terms as following:

1.     1
2.     11
3.     21
4.     1211
5.     111221
1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.

Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.
Note: Each term of the sequence of integers will be represented as a string.

Example 1:
Input: 1
Output: "1"

Example 2:
Input: 4
Output: "1211"

------------------------------------------------------------------------
Note: The rule inn the sequence: the (i+1)th sequence is the "count and say" of the ith sequence

Java:
1. My solution use while loop --12ms
class Solution {
    public String countAndSay(int n) {
        if (n == 1) return "1";
        if (n == 2) return "11";


        String cas = "11";
        for (int t = 2; t < n; t++) {
            int loc = 0;
            String r = "";
            int cnt = 1;
            while (loc < cas.length()-1) {
                if (cas.charAt(loc) != cas.charAt(loc + 1)) {
                    r += Integer.toString(cnt) + cas.charAt(loc) ;
                    cnt = 1;
                } else {
                    cnt++;
                }
                loc++;
            }
            cas = r+ Integer.toString(cnt) + cas.charAt(loc);
        }

            return cas;
        
    }
}

2. Use a function to call recursive. --12ms
class Solution {
    public String countAndSay(int n) {
        if (n==1) return "1";

        String s = "11";
        for(int i=2; i<n; i++){
            s = readS(s);
        }
        return s;
    }

    private String readS(String s){
        String r = "";
        int i=0; int j=1;

        while(i+j<s.length()){
            if(s.charAt(i)==s.charAt(i+j)){
                j++;
            }else{
                r+= "" + j + s.charAt(i);
                i+=j;
                j=1;
            }
        }

        r+= "" + j + s.charAt(i);
        return r;
    }
}

class Main {
    public static void main(String[] args) {

        Solution test = new Solution();

        for(int i=1; i<31; i++){
            System.out.println(test.countAndSay(i));
        }
    }


}


// Another function to simplify the string assemble
    private String readS(String s){
        String res = "";

        for(int i = 0; i<s.length();){
            int j =1;
            while(i+j<s.length() && s.charAt(i)==s.charAt(i+j)) j++;
            res += "" + j + s.charAt(i);
            i+=j;
        }
        return res;
    }
