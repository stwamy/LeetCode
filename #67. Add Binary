Given two binary strings, return their sum (also a binary string).

The input strings are both non-empty and contains only characters 1 or 0.

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"

======================================
Java
1. the while loop handles every digital and ensures adding carry numbers  --2ms TC: O(m+n)
class Solution {
    public String addBinary(String a, String b) { 
        String res = "";
        int carry =0;
        int i = a.length()-1;
        int j = b.length()-1;

        while(i>=0 || j >=0 || carry>0){      //use for loop would cause complex issue
            int x = (i<0? 0: a.charAt(i)-'0');
            int y = (j<0? 0: b.charAt(j)-'0');

            res = (x+y+carry)%2 + res;
            carry = (x+y+carry)/2;

            i--;
            j--;
        }


        return res;        
    }
}

=================================
Python
1. the same algorithm as java(1), since python cannot do maths in different type, data should convert before manipulate--48ms
class Solution:
    def addBinary(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: str
        """
        res = ""
        carry = 0
        i = len(a)-1
        j = len(b) -1

        while(i>=0 or j>=0  or carry>0):
            x = 0 if (i <0) else int(a[i])
            y = 0 if (j <0) else int(b[j])
            res = str((x + y + carry)%2) + res  
            carry = (x + y + carry)//2

            i-=1
            j-=1

        
        return res;

a = "1"
b = "11"

test = Solution()
print(test.addBinary(a,b))
