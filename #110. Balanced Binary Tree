Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example 1:
Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.

Example 2:
Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.

=================================
Java
1. recursion -- 1ms
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        if (root == null) return true;

        if (Math.abs(maxDept(root.left) - maxDept(root.right)) > 1)  return false;
        
        return isBalanced(root.left) && isBalanced(root.right); //After compare the parents level, go to check their child level
    }
    
    public int maxDept( TreeNode root){
        if (root == null) return 0;
        return Math.max(maxDept(root.left), maxDept((root.right))) +1;
    }
}

==========================
Python:
1. recursion --84ms the same algorithem as java, remember the first capital letter of True and False
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        if not root: return True
        if abs(self.maxDept(root.left) - self.maxDept(root.right))>1: return False

        return self.isBalanced(root.left) and self.isBalanced(root.right)

    def maxDept(self, root:TreeNode) -> int:
        if not root: return 0

        return 1+ max(self.maxDept(root.left), self.maxDept(root.right))        
