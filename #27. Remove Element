Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example 1:

Given nums = [3,2,2,3], val = 3,

Your function should return length = 2, with the first two elements of nums being 2.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,1,2,2,3,0,4,2], val = 2,

Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.

Note that the order of those five elements can be arbitrary.

It doesn't matter what values are set beyond the returned length.
------------------------------------------------------------

This problem is similar to #26 with an unsorted array; however, I didn't get the question at the beginning. This question asks to eliminate the val values in num[] instead of removing duplicate values.

Java:
1. set two pointers at the head, curr is the current spot for updated, ch is the checking element that looping the array. -4ms

class Solution {
    public int removeElement(int[] nums, int val) {
        if(nums == null || nums.length ==0) return 0;

        int curr = 0;
        for(int ch : nums){
            if (ch !=val){
                nums[curr]=ch;
                curr++;
            }
        }
        return curr;        
    }
}

Time complexity: O(n)
Space Complexity: O(1) as required

2. set two pointers for head and tail each, prvent curr=n to help escape the loop  -4ms
class Solution {
    public int removeElement(int[] nums, int val) {
        if(nums == null || nums.length ==0) return 0;
        int curr = 0;
        int n = nums.length;
        
        while(curr<n){
            if(nums[curr]==val){
                nums[curr]=nums[n-1];
                n--;
            }else{
                curr++;
            }
            
        }        
        return curr;
    }
}


Python:
1. Two pointers at head side --36ms
class Solution:
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        if not nums: 
            return 0

        cur=0
        for n in nums:
            if n!=val:
                nums[cur]=n
                cur+=1

        return cur        
        
2. Two pointers at head and tail each --60ms
class Solution:
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        if not nums: return 0

        head=0
        tail=len(nums)

        while(head<tail):
            if nums[head]==val:
                nums[head]=nums[tail-1]
                tail-=1
            else:
                head+=1

        return head

3. Use Python feature array.remove(i) . --40ms
class Solution:
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        for i in nums[::-1]:         #should handle from the end, or the for loop cannot visit every element!!
            if i==val: nums.remove(i)
        return len(nums)
