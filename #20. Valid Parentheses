Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true

----------------------------------------------
1. Java -8ms
use a stack, it would be easy to solve it. One trick is in scenario stack.empty() when pop it, check stack before pop.
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

        for(int i=0; i< s.length(); i++){
            switch (s.charAt(i)) {
                case '{':
                case '[':
                case '(':
                    stack.push(s.charAt(i));   break;
                case '}':
                    if (stack.empty() || stack.pop() != '{') return false;   break;
                case ']':
                    if (stack.empty() ||stack.pop() != '[') return false;   break;
                case ')':
                    if (stack.empty() ||stack.pop() != '(') return false;   break;
                default:
                    break;
            }
        }
        if (stack.empty()) return true;
        return false;     
    }
}
