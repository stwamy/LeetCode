Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true

----------------------------------------------
Complexity analysis:
Time Complexity: O(n) on traversing the given string one character at a time and push and pop operations on a stack take O(1) 
Space Complexity: O(n) as we push all opening brackets onto the stack and in the worst case, we will end up pushing all the brackets onto the stack

1. Java -8ms
use a stack, it would be easy to solve it. One trick is in scenario stack.empty() when pop it, check stack before pop.
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

        for(int i=0; i< s.length(); i++){
            switch (s.charAt(i)) {
                case '{':
                case '[':
                case '(':
                    stack.push(s.charAt(i));   break;
                case '}':
                    if (stack.empty() || stack.pop() != '{') return false;   break;
                case ']':
                    if (stack.empty() ||stack.pop() != '[') return false;   break;
                case ')':
                    if (stack.empty() ||stack.pop() != '(') return false;   break;
                default:
                    break;
            }
        }
        if (stack.empty()) return true;
        return false;     
    }
}


Python: beware of the stack is empty when pop
1. use a string to store dictionary - 84ms
class Solution:
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """

        sym = "{}[]()"
        stack = ""
        
        for ch in s:
            loc = sym.find(ch)
            if loc == -1 : continue
            if(loc%2==0): 
                stack +=ch
            else:
                if (not stack) or (sym[loc-1] != stack[-1]): return False
                stack = stack[:-1]

        if not stack :return True
        
        return False 
        
  2. use dictionary -52ms
  class Solution:
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """

        sym = {')':'(', ']':'[','}':'{'}
        stack = []

        for ch in s:
            if ch in sym:
                if stack: top = stack.pop()
                else: return False
                
                if top != sym[ch]: return False
            else:
                stack.append(ch)

        if stack: return False
        return True
