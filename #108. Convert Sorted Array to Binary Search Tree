Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5

==============================
Java
1. recursion  -- 0ms
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums == null || nums.length ==0)
            return null;

        return build(nums, 0, nums.length-1);
    }

    public TreeNode build(int[] nums, int left, int right){
        if (left > right) return null;

        int mid = left + (right -left)/2;
        TreeNode node = new TreeNode(nums[mid]);
        node.left = build(nums, left, mid-1);
        node.right = build(nums, mid+1, right);

        return node;
    }
}

================================
Python
1. recursion --64ms
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:
        if not nums:
            return None
        
        return self.builtTree(nums, 0, len(nums)-1)
    
    def builtTree(self, nums: List[int], left: int, right: int) -> TreeNode:
        if left > right: return None
        mid = (left + right)//2
        root = TreeNode(nums[mid])

        root.left = self.builtTree(nums, left, mid-1)
        root.right = self.builtTree(nums, mid+1, right)
        
        return root        

2. recursion with calling itself -- 68ms
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:        
        if not nums: return None
        
        mid = len(nums)//2
        root = TreeNode(nums[mid])
        root.left = self.sortedArrayToBST(nums[:mid])
        root.right = self.sortedArrayToBST(nums[mid + 1:])
        
        return root
