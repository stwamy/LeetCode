Description:

Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

--------------------------------------------------------------------------------------------------------------
Some Points: 
1. The elements may be negative, don't use "if (nums[i] > target) continue;"
2. In HashMap, such as nums[i]=3 target=6, don't put this element into the hashmap to prevent find itself, do it after searching

Java:

1. Brute Force
The brute force approach is simple. Loop through each element xx and find if there is another value that equals 
to target - x.


class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        for (int i = 0; i < nums.length; i++){
            for (int j = i+1; j< nums.length; j++){
                if (target - nums[i] == nums[j]){
                    return new int[] {i,j};
                }
            }
            
        }
        throw new IllegalArgumentException("No Solution.");
    }
}
Complexity Analysis

Time complexity : O(n^2)

For each element, we try to find its complement by looping through the rest of array which takes O(n)O(n) time. Therefore, the time complexity is O(n^2).

Space complexity : O(1). 

--------------------------------------------------------------------------------------------------------------

2. HashMap
It turns out we can do it in one-pass. While we iterate and inserting elements into the table, we also look back to check if current element's complement already exists in the table. If it exists, we have found a solution and return immediately.


class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> hashMap = new HashMap<>();
    
        for(int i = 0; i<nums.length; i++){
            int find = target-nums[i];
            if(hashMap.containsKey(find)){
                return new int[] { hashMap.get(find), i};
              }
            hashMap.put(nums[i],i);
        }
        throw new IllegalArgumentException("No two sum solution.");
            
    }
}

Complexity Analysis:

Time complexity : O(n). 
We traverse the list containing nn elements only once. Each look up in the table costs only O(1)O time.

Space complexity : O(n).
The extra space required depends on the number of items stored in the hash table, which stores at most n elements.

--------------------------------------------------------------------------------------------------------------
Some Points:
1. "for i in nums" is not the index, should use "range(len(nums))"
2. return use "[]" not "{}" for list

Pyhon:
1. Brute Force (low efficient, LeetCode Error: Time Limit Exceeded)
class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        for i in range(len(nums)-1):
            for j in range(i+1,len(nums)):
                if (target-nums[i]) == nums[j]:
                    return [i,j]

2. dictionary: 60ms

class Solution:
    def twoSum(self, nums, target):
        dic = {}
        for i in range(len(nums)):
            find = target - nums[i]
            
            if dic.get(find) is not None:
                return [dic.get(find),i]

            dic[nums[i]]=i

3. enumerate: 既要遍历索引又要遍历元素时,使用该内置函数枚举 可迭代的（iterable）/可遍历的对象（如列表、字符串）
