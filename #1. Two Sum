Description:

Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

--------------------------------------------------------------------------------------------------------------
Java:

1. Brute Force
The brute force approach is simple. Loop through each element xx and find if there is another value that equals 
to target - x.


class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        for (int i = 0; i < nums.length; i++){
            for (int j = i+1; j< nums.length; j++){
                if (target - nums[i] == nums[j]){
                    return new int[] {i,j};
                }
            }
            
        }
        throw new IllegalArgumentException("No Solution.");
    }
}
Complexity Analysis

Time complexity : O(n^2)

For each element, we try to find its complement by looping through the rest of array which takes O(n)O(n) time. Therefore, the time complexity is O(n^2).

Space complexity : O(1). 

--------------------------------------------------------------------------------------------------------------

2. HashMap
It turns out we can do it in one-pass. While we iterate and inserting elements into the table, we also look back to check if current element's complement already exists in the table. If it exists, we have found a solution and return immediately.


class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> hashMap = new HashMap<>();
    
        for(int i = 0; i<nums.length; i++){
            int find = target-nums[i];
            if(hashMap.containsKey(find)){
                return new int[] { hashMap.get(find), i};
              }
            hashMap.put(nums[i],i);
        }
        throw new IllegalArgumentException("No two sum solution.");
            
    }
}

Complexity Analysis:

Time complexity : O(n). 
We traverse the list containing nn elements only once. Each look up in the table costs only O(1)O time.

Space complexity : O(n).
The extra space required depends on the number of items stored in the hash table, which stores at most n elements.


