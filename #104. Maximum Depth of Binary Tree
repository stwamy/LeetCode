Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.

======================================
Java
1. Recursion --0ms TC:O(log(n))
class Solution {
    public int maxDepth(TreeNode root) {

        return (root == null? 0: (1 + Math.max(maxDepth(root.left) , maxDepth(root.right))));        
    }
}

2. Recursion --0ms alternative and more readable coding
class Solution {
    public int maxDepth(TreeNode root) {
            if (root == null) return 0;
            return 1+ Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}

3. iteration DFS --4ms TC:O(n)
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;

        int deep = 1;
        Stack<TreeNode> ts = new Stack<>();
        Stack<Integer> ds = new Stack<>();
        ts.push(root);
        ds.push(deep);

        while(!ts.isEmpty()){
            TreeNode node = ts.pop();
            int d = ds.pop();

            deep = Math.max(d, deep);
            if(node.left !=null){
                ts.push(node.left);
                ds.push(d+1);
            }
            if(node.right !=null){
                ts.push(node.right);
                ds.push(d+1);
            }
        }
        return deep;
    }
}


4. iteration WFS --4ms TC:O(n)
