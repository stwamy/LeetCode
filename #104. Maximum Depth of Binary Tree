Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.

======================================
Java
1. Recursion --0ms TC:O(log(n))
class Solution {
    public int maxDepth(TreeNode root) {

        return (root == null? 0: (1 + Math.max(maxDepth(root.left) , maxDepth(root.right))));        
    }
}

2. Recursion --0ms alternative and more readable coding
class Solution {
    public int maxDepth(TreeNode root) {
            if (root == null) return 0;
            return 1+ Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}

3. iteration DFS --2ms TC:O(n)  use queue
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;

        int deep = 1;
        Queue<TreeNode> ts = new LinkedList<>();
        Queue<Integer> ds = new LinkedList<>();
        //add()和remove()方法在失败的时候会抛出异常(不推荐)
        ts.offer(root);
        ds.offer(deep);

        while(!ts.isEmpty()){
            TreeNode node = ts.poll();
            int d = ds.poll();

            deep = Math.max(d, deep);
            if(node.left !=null){
                ts.offer(node.left);
                ds.offer(d+1);
            }
            if(node.right !=null){
                ts.offer(node.right);
                ds.offer(d+1);
            }
        }
        return deep;

    }
}

4. Iteration DFS -- 3ms use stack
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;

        int deep = 1;
        Stack<TreeNode> ts = new Stack<>();
        Stack<Integer> ds = new Stack<>();
        ts.push(root);
        ds.push(deep);

        while(!ts.isEmpty()){
            TreeNode node = ts.pop();
            int d = ds.pop();

            deep = Math.max(d, deep);
            if(node.left !=null){
                ts.push(node.left);
                ds.push(d+1);
            }
            if(node.right !=null){
                ts.push(node.right);
                ds.push(d+1);
            }
        }
        return deep;

    }
}

4. iteration WFS --4ms TC:O(n)


-----------------------------------------
python:
1. Recursion: -- 52ms
   def maxDepth1(self, root: TreeNode) -> int:
        if root == None:
            return 0
        else:
            return 1+max(self.maxDepth(root.left), self.maxDepth(root.right))   
            
2. Iteration DFS --52ms . //queue
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if root == None:  return 0

        deep = 1
        stack = []
        stack.append([root, deep])

        while(stack):
            node, d = stack.pop(0)  # Here should use a queue instead of stack because the depth is smaller on the left.
            deep = max(d, deep)

            if node.left is not None:
                stack.append([node.left, deep+1])
            
            if node.right is not None:
                stack.append([node.right, deep+1])

        return deep      

3. Iteration DFS -- 52ms //stack
    def maxDepth(self, root: TreeNode) -> int:
        if root == None:  return 0

        deep = 1
        stack = []
        stack.append([root, deep])

        while(stack):
            node, d = stack.pop()
            deep = max(d, deep)
            if node.left is not None:
                stack.append([node.left, d+1]) 
            
            if node.right is not None:
                stack.append([node.right, d+1])

        return deep
