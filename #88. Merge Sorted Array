Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]

===============================
Java: This problem focus on how to merge the rest element if one of the array all add.
(1) if nums1 loop finish, add the rest nums2 from its head.
(2) if nums2 loop finish, exit. cuz nums1 is the target array.

1. pointer --2ms
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int l = m+n-1;

        while(n>0 && m>0){
            if(nums1[m-1]> nums2[n-1]){
                nums1[l] = nums1[m-1];
                m--;
            }else {
                nums1[l] = nums2[n - 1];
                n--;
            }
            l--;
        }

        if(m<=0){
            for(int i=0; i<n; i++){
                nums1[i] = nums2[i];
            }
        }

    }    
}

2. the same algorithem with explicit coding --2ms
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int l =(m--)+(n--)-1;

        while(n>=0 && m>=0){    //m, n  这里是下标
            if(nums1[m]> nums2[n])  nums1[l--] = nums1[m--];
            else    nums1[l--] = nums2[n--];
        }

        while(n>=0){
                nums1[l--] = nums2[n--];
            }
    }    
}

3. very explicit and clear coding for #2
class Solution {
    public void merge(int[] A, int m, int[] B, int n) {
        int i = m - 1, j = n - 1, k = m + n - 1;
        while(i >= 0 && j >= 0) {
            A[k--] = A[i] > B[j] ? A[i--] : B[j--];
        }
        while(j >= 0) {
            A[k--] = B[j--];
        }
    }    
}
==========================================
Python
1. the same algorithm --36ms
class Solution:
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        l = m + n -1
        m -=1
        n -=1
        #l, m, n = m + n -1, m-1, n-1  the same as above 3 statements

        while(m>=0 and n>=0):
            if nums1[m]>nums2[n]:
                nums1[l] = nums1[m]
                m-=1
            else:
                nums1[l] = nums2[n]
                n-=1
            l-=1
        
        while(n>=0):
            nums1[l] = nums2[n]
            l-=1
            n-=1        
            
        '''
        alternetive of the above while loop
        for i in range(0,n+1):
            nums1[i] = nums2[i]
        '''
