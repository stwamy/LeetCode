Implement int sqrt(int x).

Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

Example 1:

Input: 4
Output: 2
Example 2:

Input: 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.

===========================================================
Java
1. Integer Newton --34ms
class Solution {
    public int mySqrt(int x) {
        long  r = x;
        while (r*r > x)
            r = (r + x/r) / 2;
        return (int)r;
    }
}

2. Binary Search  --24ms  TC: O(log(n))
class Solution {
    public int mySqrt(int x) {
        if (x<=1) return x;
        
        int l=1, r=x/2;  //sqrt is at most x/2 (i.e. x=4) 
        while(l<=r){
            int m = l + (r-l)/2;
            if(m <= x/m) l = m+1;
            else r = m-1;
        }

        return r;
    }
}

3. Upper_bound Binary Search --22ms
class Solution {
    public int mySqrt(int x) {
        
        if (x <=1) return x;
        int l = 1;          //use 1 to prevent x/m when m=0
        int r = x;

        while(l<r){
            int m = l + (r-l)/2;
            if(m <= x/m) l = m+1;   // m< x/m --> lower bound() 返回的是第一个大于或等于value的位置
            else r = m;
        }
        return l-1;  // upper_bound()返回的是第一个大于value的位置
    }
}
