Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

==========================================
Java:
1. Recursion --0ms since the val can be negative, we cannot determine [if root.val>sum return false]
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root == null) return false;
        
        if(root.left== null && root.right == null){
            if (root.val== sum) return true;
            return false;
        }
           
        return (hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum-root.val));
    }
}

2. Iteration --1ms Use Queue to store the node with its path sum and find the leave equals to sum
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root == null) return false;
        
        if(root.left== null && root.right == null){
            if (root.val== sum) return true;
            return false;
        }
           
        Queue<TreeNode> NodeQ = new LinkedList<>();
        NodeQ.offer(root);
        
        while(!NodeQ.isEmpty()){
            TreeNode node = NodeQ.poll();
            if(node.left == null && node.right == null) 
                if (node.val == sum) return true;
            if(node.left != null){
                node.left.val += node.val;
                NodeQ.offer(node.left);
            }
            if(node.right != null){
                node.right.val += node.val;
                NodeQ.offer(node.right);
            }
        }
        
        return false;
    }
}



==========================================
Python:
1. Recursion -- 52ms if the leaf equal the target number, it's True
class Solution:
    def hasPathSum(self, root: TreeNode, sum: int) -> bool:
        if not root : return False

        if not root.left and not root.right:
            if root.val== sum: return True
            else: return False

        return self.hasPathSum(root.left, sum-root.val) or self.hasPathSum(root.right, sum-root.val) 
        
2. Iteration --56ms the same algarithem as java#2
class Solution:
    def hasPathSum(self, root: TreeNode, sum: int) -> bool:
        if not root: return False
        if not root.left and not root.right:
            if root.val == sum: return True

        NodeQ = []
        NodeQ.insert(0, root)

        while len(NodeQ)>0:
            node = NodeQ.pop()
            if not node.left and not node.right:
                if node.val == sum: return True
            
            if node.left:
                node.left.val += node.val
                NodeQ.insert(0, node.left)
            
            if node.right:
                node.right.val += node.val
                NodeQ.insert(0, node.right)

        return False 
