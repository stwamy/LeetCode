Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.


In Pascal's triangle, each number is the sum of the two numbers directly above it.

Example:

Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

========================
Java: -- 0ms . TC: O(numRows^2), SC: O(numRows^2)
class Solution {
    public List<List<Integer>> generate(int numRows) {

        List<List<Integer>> tri = new ArrayList<List<Integer>>();

        if (numRows==0) return tri;
        tri.add(new ArrayList<>());
        tri.get(0).add(1);


        for(int i=1; i<numRows; i++){
            List<Integer> arr = new ArrayList<>();
            arr.add(1);
            arr.add(1);
            for(int j=1; j<i; j++){
                arr.add(j, tri.get(i-1).get(j-1)+tri.get(i-1).get(j));
            }

            tri.add(arr);
        }
        return tri;        
    }
}


===========================
Python:

