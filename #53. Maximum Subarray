Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

---------------------------------
This is a typical DP problem
https://blog.csdn.net/u013309870/article/details/75193592

Java:
1. DP bottome up --6ms TC:O(n), SC: O(n) 
class Solution {
    public int maxSubArray(int[] nums) {
        int[] s = new int[nums.length];
        s[0] = nums[0];
        int maxSum = s[0];

        for(int i=1; i<nums.length; i++){
            if (s[i-1]>0)
                s[i] = nums[i]+ s[i-1];
            else
                s[i] = nums[i];
            // s[i] = nums[i] + (s[i-1]>0? s[i-1]:0); the same as above 4 lines
            maxSum = Math.max(maxSum, s[i]);

        }
        return maxSum;        
    }
}

2. DP optimize space -- 6ms  TC:O(n), SC: O(1)
    public int maxSubArray(int[] nums) {
        int maxSum = nums[0];
        int s = nums[0];

        for(int i=1; i<nums.length; i++){
            s = nums[i] + Math.max(s, 0);
            maxSum = Math.max(maxSum, s);
        }
        return maxSum;
    }

3. Divide and Conque
In array A[left, right], mid = (l+r)/2, the maxSub may exist in three interval:
    (1). maxSub in A[left, mid-1]
    (2). maxSub in A[mid+1, right]
    (3). maxSub corss between mid
calculate the max value of the three above.


=====================================================
Python:
1. DP bottom up:  --44ms, TC:O(n)  SC:O(1)
def maxSubArray(nums):
  """
  :type nums: List[int]
  :rtype: int
  """
  for i in range(1,len(nums)):
   if nums[i-1] >0:
     nums[i]+= nums[i-1]
  return max(nums)

arr = [-2,1,-3,4,-1,2,1,-5,4]
print(maxSubArray(arr))

2. DP use array --44ms
class Solution:
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dp = [0] * len(nums);
        dp[0] = nums[0];
        
        for i in range(1,len(nums)):
            if dp[i-1] <0 : dp[i] = nums[i]
            else: dp[i] = nums[i] + dp[i-1]
        return max(dp)
 
 3. DP optimize spac: --44ms
 class Solution:
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        maxS = nums[0]
        s = nums[0]
        
        for i in range(1, len(nums)):
            s = nums[i] + max(s, 0)
            maxS = max(s, maxS)
        
        return maxS
