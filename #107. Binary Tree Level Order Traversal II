Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]


==========================================
Java
1. recusion -- 0ms  O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();   // Beware: the List is defined as ArrayList

        if (root == null)   return res;

        int h = maxDepth(root);

        for(int i=0; i<h; i++){
            res.add(new ArrayList<>());
        }

        recursionTraversal(res, root, h-1, 0);
        return res;

    }

    private void recursionTraversal(List<List<Integer>> res, TreeNode node, int height, int level){
        if(node == null) return ;

        res.get(height-level).add(node.val);
        recursionTraversal(res, node.left, height, level+1);
        recursionTraversal(res, node.right, height, level+1);
    }
    
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;
        return 1 + Math.max(maxDepth(root.left) , maxDepth(root.right));
    }
}

2. Iteration with BFS -- 1ms
visit the top line and use a queue, store the node size of each level and pop them to put their child nodes value to ArrayList

class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        //iteration version
        if (root == null) return new ArrayList<>();
        
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> tmp = new ArrayList<>();

        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        tmp.add(root.val);
        res.add(tmp);

        while(!q.isEmpty()){
            tmp = new ArrayList<>();
            int qSize = q.size();
            for(int i = 0; i< qSize; i++){
                TreeNode node = q.poll();

                if(node.left != null){
                    tmp.add(node.left.val);
                    q.offer(node.left);
                }
                
                if(node.right != null){
                    tmp.add(node.right.val);
                    q.offer(node.right);
                }
            }
            
            if(!tmp.isEmpty()) res.add(0, tmp);
        } 
        
        return res;
    }
}

===========================================
Python:

1. Recursion ---44ms
Since python List has insert function, we don't have to initiate the List at the begining

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        res = []
        if root == None: return res
        
        self.travers(res, root, 1)
        return res 
    
    def travers(self, res: List[List[int]], node: TreeNode, level: int):
        if node == None: return

        if len(res)<level: res.insert(0,[])
        res[len(res)-level].append(node.val)

        self.travers(res, node.left, level+1)
        self.travers(res, node.right, level+1)
