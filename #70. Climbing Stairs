ou are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

=======================================================
Java
1. Brute Force. My solution with recursion . TC:(2^n), SC:(2^n) --8523ms
class Solution {
    public int climbStairs(int n) {

        if (n==1) return 1;
        if (n==2) return 2;
        return climbStairs(n-1) + climbStairs(n-2);    
    }
}

2. bottom up -2ms  TC:O(n), SC:O(n)
public class Solution {
    public int climbStairs(int n) {
        if (n <3) return n;

        int[] steps = new int[n+1];
        steps[1] = 1;
        steps[2] = 2;

        for(int i=3; i<n+1; i++){
            steps[i] = steps[i-1]+steps[i-2];
        }

        return steps[n];
    }
}

3. bottom up optimize storage -2ms
public class Solution {
    public int climbStairs(int n) {
        if (n <3) return n;

        int step1 = 1;
        int step2 = 2;

        for(int i=3; i<n+1; i++){
            int cur = step1 + step2;
            step1 = step2;
            step2 = cur;
        }

        return step2;
    }
}

===========================
Python
1. DP bottom up --32ms
class Solution:
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        if(n<3): return n
        
        steps = [None] * (n+1)
        steps[1] = 1
        steps[2] = 2
        
        for i in range(3, n+1):
            steps[i] = steps[i-1] + steps[i-2]

        return steps[n]
       
 2. DP recursion -- Time Limit Exceeded
 class Solution:
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        if (n<3): return n
        return self.climbStairs(n-1) + self.climbStairs(n-2)

n = 3
test = Solution()
print(test.climbStairs(n))        

3. DP memoization -- 32ms
class Solution:
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n<3 : return n
        res = [None]*(n+1)
        res[0] = 0
        res[1] = 1
        res[2] = 2
        return self.cal(n, res)

    def cal(self,n,res):
        if not (res[n]== None):
            return res[n]

        res[n] = self.cal(n-1, res) + self.cal(n-2, res)
        return res[n]
        
 
        
