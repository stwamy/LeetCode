Given a 32-bit signed integer, reverse digits of an integer.

Example 1:
Input: 123
Output: 321

Example 2:
Input: -123
Output: -321

Example 3:
Input: 120
Output: 21

Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [âˆ’2^31,  2^31 âˆ’ 1], that is [-2147483648, 2147483647]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

-----------------------------------------------------------------------------------------------------------------------
Java:
There are two problems in this question, one is to reverse number, another one is to reconize the overflow situation.
Don't forget the negative number input.

Complexity Analysis
Time Complexity: O(log(x))]. There are roughly O(log10(x)) digits in x.
Space Complexity: O(1).

1. My solution use "for loop", and use a long type to restore result -- 31ms
    public int reverse(int x) {

        long res = 0;
        
        for(int t = x; Math.abs(t) > 0; t = t/10){
          res = res*10 + t%10;
        }
        
        if (Math.abs(res) > Integer.MAX_VALUE){
          return 0;
        }
        return Math.toIntExact(res);
    }
    
2. Sample solution use "while loop" and keep checking the result is not overflow:
    public int reverse(int x) {
        int rev = 0;
        while (x != 0) {
            int pop = x % 10;
            x /= 10;
            if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;
            if (rev < Integer.MIN_VALUE/10 || (rev == Integer.MIN_VALUE / 10 && pop < -8)) return 0;
            rev = rev * 10 + pop;
        }
        return rev;
    }


